#include<stdio.h>
#include<stdlib.h>
struct node
{
    int data;
    struct node*next;
};
 struct node*head,*temp,*newnode,*insert,*local,*ptr1,*ptr2;
 
 void traverse_ll()
{
    if(head==NULL)
    {
        printf("ERROR");
        exit(1);        
    }
    temp=head;
    while(temp!=NULL)
    {
        printf("%d\t",temp->data);
        temp=temp->next;
    }
}


 void insert_ll()
 {
    temp=head;
    int pos,dummy;
    printf("ENTER THE POSITION WHERE YOU WANT TO INSERT: ");
    scanf("%d",&pos);
     printf("ENTER THE DATA YOU WANT TO INSERT: ");
    scanf("%d",&dummy);
    int i=1;
    while(i<(pos-1))
    {
        temp=temp->next;
        i++;
    }
    local=temp->next;
    insert=(struct node*)malloc(sizeof(struct node));
    temp->next=insert;
    insert->data=dummy;
    insert->next=local;
    traverse_ll();
}





void delete_ll()
{
    temp=head;
    ptr1=head;
    int del;
    printf("ENTER THE POSITION WHICH YOU WANT TO DELETE: ");
    scanf("%d",&del);
    int u=1,v=1;
    while(u<del)
    {
        temp=temp->next;
        u++;
    }
    while(v<(del-1))
    {
        ptr1=ptr1->next;
        v++;
    }
    if (del == 1){
        head = head->next;

    }
    else{

    ptr1->next=temp->next;
    }
    temp->next=NULL;
    free(temp);
    traverse_ll();
    return;
}



void create_ll(int n)
{
    int first_data,value;
    head=(struct node*)malloc(sizeof(struct node));
    printf("ENTER THE DATA IN HEAD NODE: ");
    scanf("%d",&first_data);
    head->data=first_data;
    head->next=0;
    temp=head;
    for(int i=2;i<=n;i++)
    {
        printf("ENTER THE DATA IN  NODE NUMBER %d: ",i);
        scanf("%d",&value);
        newnode=(struct node*)malloc(sizeof(struct node));
        newnode->data=value;
        newnode->next=0;
        temp->next=newnode;
        temp=temp->next;
    }
}
int main()
{
    int n;
    printf("ENTER THE NUMBER OF NODES: ");
    scanf("%d",&n);
    create_ll(n);
    printf("DATA IN LINKED LIST IS AS FOLLOWS:");
    traverse_ll();
    //code continued from tut.c for insertion of an element in linked list
    // insert_ll();
    //code continued from tut.c for deletion of an element in linked list
    delete_ll();
     //code continued from tut.c for reversing  a linked list
//    Â reverse_ll();
}